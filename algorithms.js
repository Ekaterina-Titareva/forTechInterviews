// ЗАДАЧА 1:Проверка на палиндром


// Фраза является палиндромом, если после преобразования всех заглавных букв в строчные и удаления всех неалфавитно-цифровых символов она читается одинаково вперед и назад. Алфавитно-цифровыми символами являются буквы и цифры.

// Учитывая строку s, верните true если это палиндром, иначе верните false.

// Пример 1:

// **Вход:** s = "A man, a plan, a canal: Panama"
// **Выход:** true
// **Пояснение:** "amanaplanacanalpanama" - палиндром.
// Пример 2:

// **Вход:** s = "race a car"
// **Выход:** false
// **Пояснение:** "raceacar" - не палиндром.
// Пример 3:

// **Вход:** s = " "
// **Выход:** true
// **Пояснение:** s - пустая строка "" после удаления неалфавитно-цифровых символов.
// Поскольку пустая строка читается одинаково вперед и назад, она является палиндромом.
// Ограничения:

// 1 <= s.length <= 2 * 105
// s состоит только из печатных символов ASCII.
// Алгоритм 1
// Задача заключается в определении, является ли данная строка палиндромом после удаления неалфавитно-цифровых символов и преобразования всех заглавных букв в строчные.

// Для решения задачи мы можем использовать два указателя - один начнет с начала строки, а второй с конца строки. Мы будем сравнивать символы, на которые указывают указатели, и если они не совпадают, то строка не является палиндромом. Если символы совпадают, мы будем продолжать сравнивать символы, двигая оба указателя внутрь строки до тех пор, пока строка не будет полностью просканирована.

// Если оба указателя пересекутся или встретятся в середине строки, это означает, что строка является палиндромом.

// Однако перед началом сравнения символов необходимо привести строку к нужному формату. Мы превратим все буквы в строчные с помощью функции toLowerCase(), а затем удалим все неалфавитно-цифровые символы с помощью регулярного выражения.

// В результате мы вернем true, если строка является палиндромом, и false в противном случае.

// Это решение имеет сложность времени O(n), где n - длина строки s.

// function isPalindrome(s) {
//   // Приводим строку к нижнему регистру и удаляем все неалфавитно-цифровые символы
//   s = s.toLowerCase().replace(/[^a-z0-9]/g, '');

//   // Используем два указателя - один начнет с начала строки, а второй с конца
//   let left = 0;
//   let right = s.length - 1;

//   // Пока указатели не пересекутся или не встретятся в середине строки
//   while (left < right) {
//     // Если символы не совпадают, строка не является палиндромом
//     if (s[left] !== s[right]) {
//       return false;
//     }
//     // Перемещаем указатели внутрь строки
//     left++;
//     right--;
//   }

//   // Если вышли из цикла, значит строка является палиндромом
//   return true;
// }


function ValidPalindrome(s) {
    // Приведем строку к нижнему регистру и удалим все символы, кроме букв и цифр
    const alphanumericString = s.toLowerCase().replace(/[^a-z0-9]/g, '');
    
    // Проверим, является ли полученная строка палиндромом
    const len = alphanumericString.length;
    for (let i = 0; i < Math.floor(len / 2); i++) {
      if (alphanumericString[i] !== alphanumericString[len - 1 - i]) {
        return false;
      }
    }
    
    return true;
}



